import fs from 'fs/promises';
import path from 'path';

const ensureDir = async (dir) => fs.mkdir(dir, { recursive: true });

const slugify = (str) => str
  .toLowerCase()
  .replace(/[^a-z0-9]+/g, '-')
  .replace(/(^-|-$)/g, '');

const validateWordPressSpec = (spec) => {
  const required = ['platform', 'projectName', 'layout', 'colors'];
  for (const key of required) {
    if (!spec[key]) throw new Error(`Missing required field: ${key}`);
  }
  if (spec.platform !== 'wordpress') {
    throw new Error('Only platform "wordpress" is supported in this builder');
  }
  const layoutKeys = ['homepage', 'postPage', 'archivePage'];
  for (const k of layoutKeys) {
    if (!spec.layout[k]) throw new Error(`Missing layout.${k}`);
  }
  const colorKeys = ['primary', 'accent', 'background', 'text'];
  for (const k of colorKeys) {
    if (!spec.colors[k]) throw new Error(`Missing colors.${k}`);
  }
};

const generateStyleCSS = (spec) => {
  const themeName = spec.projectName;
  const slug = slugify(themeName);
  
  return `/*
Theme Name: ${themeName}
Description: A modern WordPress theme generated by ThemeSmith
Author: ThemeSmith
Version: 1.0.0
License: GPL v2 or later
License URI: https://www.gnu.org/licenses/gpl-2.0.html
Text Domain: ${slug}
Requires at least: 6.0
Tested up to: 6.4
Requires PHP: 7.4
*/

/* Reset and base styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root {
  --color-primary: ${spec.colors.primary};
  --color-accent: ${spec.colors.accent};
  --color-background: ${spec.colors.background};
  --color-text: ${spec.colors.text};
  --font-heading: ${spec?.fonts?.heading || 'system-ui, sans-serif'};
  --font-body: ${spec?.fonts?.body || 'system-ui, sans-serif'};
}

body {
  font-family: var(--font-body);
  background-color: var(--color-background);
  color: var(--color-text);
  line-height: 1.6;
}

/* Typography */
h1, h2, h3, h4, h5, h6 {
  font-family: var(--font-heading);
  font-weight: 600;
  line-height: 1.2;
  margin-bottom: 1rem;
}

h1 { font-size: 2.5rem; }
h2 { font-size: 2rem; }
h3 { font-size: 1.75rem; }
h4 { font-size: 1.5rem; }
h5 { font-size: 1.25rem; }
h6 { font-size: 1rem; }

/* Layout */
.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1rem;
}

.site-header {
  background-color: var(--color-primary);
  color: white;
  padding: 1rem 0;
}

.site-header .container {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.site-title {
  font-size: 1.5rem;
  font-weight: bold;
  color: white;
  text-decoration: none;
}

.main-navigation ul {
  list-style: none;
  display: flex;
  gap: 2rem;
}

.main-navigation a {
  color: white;
  text-decoration: none;
  font-weight: 500;
}

.main-navigation a:hover {
  color: var(--color-accent);
}

/* Content */
.site-main {
  padding: 2rem 0;
}

.content-area {
  ${spec.layout.homepage === 'sidebar' ? 'display: grid; grid-template-columns: 2fr 1fr; gap: 2rem;' : ''}
}

.post {
  margin-bottom: 2rem;
  padding-bottom: 2rem;
  border-bottom: 1px solid #eee;
}

.post:last-child {
  border-bottom: none;
}

.post-title {
  margin-bottom: 0.5rem;
}

.post-title a {
  color: var(--color-text);
  text-decoration: none;
}

.post-title a:hover {
  color: var(--color-accent);
}

.post-meta {
  color: #666;
  font-size: 0.9rem;
  margin-bottom: 1rem;
}

.post-content {
  margin-bottom: 1rem;
}

.read-more {
  color: var(--color-accent);
  text-decoration: none;
  font-weight: 500;
}

.read-more:hover {
  text-decoration: underline;
}

/* Sidebar */
.widget-area {
  background: #f8f9fa;
  padding: 1.5rem;
  border-radius: 8px;
}

.widget {
  margin-bottom: 2rem;
}

.widget:last-child {
  margin-bottom: 0;
}

.widget-title {
  font-size: 1.25rem;
  margin-bottom: 1rem;
  color: var(--color-primary);
}

/* Footer */
.site-footer {
  background-color: var(--color-primary);
  color: white;
  padding: 2rem 0;
  margin-top: 3rem;
}

.site-footer .container {
  text-align: center;
}

/* Responsive */
@media (max-width: 768px) {
  .site-header .container {
    flex-direction: column;
    gap: 1rem;
  }
  
  .main-navigation ul {
    flex-direction: column;
    gap: 1rem;
    text-align: center;
  }
  
  .content-area {
    grid-template-columns: 1fr;
  }
  
  h1 { font-size: 2rem; }
  h2 { font-size: 1.75rem; }
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
  :root {
    --color-background: #1a1a1a;
    --color-text: #eaeaea;
  }
  
  .widget-area {
    background: #2a2a2a;
  }
  
  .post {
    border-bottom-color: #333;
  }
}

/* Gutenberg blocks */
.wp-block-group {
  margin-bottom: 2rem;
}

.wp-block-button__link {
  background-color: var(--color-accent);
  color: white;
  padding: 0.75rem 1.5rem;
  border-radius: 4px;
  text-decoration: none;
  display: inline-block;
}

.wp-block-button__link:hover {
  opacity: 0.9;
}

/* Accessibility */
.screen-reader-text {
  clip: rect(1px, 1px, 1px, 1px);
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
}

.screen-reader-text:focus {
  background-color: #f1f1f1;
  border-radius: 3px;
  box-shadow: 0 0 2px 2px rgba(0, 0, 0, 0.6);
  clip: auto !important;
  color: #21759b;
  display: block;
  font-size: 14px;
  font-weight: bold;
  height: auto;
  left: 5px;
  line-height: normal;
  padding: 15px 23px 14px;
  text-decoration: none;
  top: 5px;
  width: auto;
  z-index: 100000;
}
`;
};

const generateFunctionsPHP = (spec) => {
  const slug = slugify(spec.projectName);
  
  return `<?php
/**
 * ${spec.projectName} functions and definitions
 *
 * @package ${slug}
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

// Define theme constants
define('THEME_VERSION', '1.0.0');
define('THEME_DIR', get_template_directory());
define('THEME_URL', get_template_directory_uri());

/**
 * Theme setup
 */
function ${slug}_setup() {
    // Add theme support for various features
    add_theme_support('title-tag');
    add_theme_support('post-thumbnails');
    add_theme_support('html5', array(
        'search-form',
        'comment-form',
        'comment-list',
        'gallery',
        'caption',
        'style',
        'script',
    ));
    add_theme_support('custom-logo');
    add_theme_support('customize-selective-refresh-widgets');
    
    // Add support for editor styles
    add_theme_support('editor-styles');
    add_editor_style('assets/css/editor-style.css');
    
    // Add support for wide and full alignment
    add_theme_support('align-wide');
    
    // Add support for responsive embeds
    add_theme_support('responsive-embeds');
    
    // Register navigation menus
    register_nav_menus(array(
        'primary' => __('Primary Menu', '${slug}'),
        'footer' => __('Footer Menu', '${slug}'),
    ));
    
    // Set content width
    if (!isset($content_width)) {
        $content_width = 1200;
    }
}
add_action('after_setup_theme', '${slug}_setup');

/**
 * Enqueue scripts and styles
 */
function ${slug}_scripts() {
    // Enqueue main stylesheet
    wp_enqueue_style('${slug}-style', get_stylesheet_uri(), array(), THEME_VERSION);
    
    // Enqueue custom CSS
    wp_enqueue_style('${slug}-custom', THEME_URL . '/assets/css/custom.css', array('${slug}-style'), THEME_VERSION);
    
    // Enqueue main JavaScript
    wp_enqueue_script('${slug}-script', THEME_URL . '/assets/js/main.js', array('jquery'), THEME_VERSION, true);
    
    // Localize script for AJAX
    wp_localize_script('${slug}-script', 'themeAjax', array(
        'ajaxurl' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('${slug}_nonce'),
    ));
    
    // Enqueue comment reply script
    if (is_singular() && comments_open() && get_option('thread_comments')) {
        wp_enqueue_script('comment-reply');
    }
}
add_action('wp_enqueue_scripts', '${slug}_scripts');

/**
 * Register widget areas
 */
function ${slug}_widgets_init() {
    register_sidebar(array(
        'name' => __('Sidebar', '${slug}'),
        'id' => 'sidebar-1',
        'description' => __('Add widgets here.', '${slug}'),
        'before_widget' => '<section id="%1$s" class="widget %2$s">',
        'after_widget' => '</section>',
        'before_title' => '<h2 class="widget-title">',
        'after_title' => '</h2>',
    ));
    
    register_sidebar(array(
        'name' => __('Footer Widgets', '${slug}'),
        'id' => 'footer-widgets',
        'description' => __('Add widgets here.', '${slug}'),
        'before_widget' => '<div id="%1$s" class="widget %2$s">',
        'after_widget' => '</div>',
        'before_title' => '<h3 class="widget-title">',
        'after_title' => '</h3>',
    ));
}
add_action('widgets_init', '${slug}_widgets_init');

/**
 * Customizer additions
 */
function ${slug}_customize_register($wp_customize) {
    // Add color scheme section
    $wp_customize->add_section('${slug}_colors', array(
        'title' => __('Color Scheme', '${slug}'),
        'priority' => 30,
    ));
    
    // Primary color
    $wp_customize->add_setting('primary_color', array(
        'default' => '${spec.colors.primary}',
        'sanitize_callback' => 'sanitize_hex_color',
    ));
    
    $wp_customize->add_control(new WP_Customize_Color_Control($wp_customize, 'primary_color', array(
        'label' => __('Primary Color', '${slug}'),
        'section' => '${slug}_colors',
    )));
    
    // Accent color
    $wp_customize->add_setting('accent_color', array(
        'default' => '${spec.colors.accent}',
        'sanitize_callback' => 'sanitize_hex_color',
    ));
    
    $wp_customize->add_control(new WP_Customize_Color_Control($wp_customize, 'accent_color', array(
        'label' => __('Accent Color', '${slug}'),
        'section' => '${slug}_colors',
    )));
}
add_action('customize_register', '${slug}_customize_register');

/**
 * Output customizer CSS
 */
function ${slug}_customizer_css() {
    $primary_color = get_theme_mod('primary_color', '${spec.colors.primary}');
    $accent_color = get_theme_mod('accent_color', '${spec.colors.accent}');
    
    if ($primary_color !== '${spec.colors.primary}' || $accent_color !== '${spec.colors.accent}') {
        echo '<style type="text/css">';
        echo ':root { --color-primary: ' . esc_html($primary_color) . '; --color-accent: ' . esc_html($accent_color) . '; }';
        echo '</style>';
    }
}
add_action('wp_head', '${slug}_customizer_css');

/**
 * Custom excerpt length
 */
function ${slug}_excerpt_length($length) {
    return 30;
}
add_filter('excerpt_length', '${slug}_excerpt_length');

/**
 * Custom excerpt more
 */
function ${slug}_excerpt_more($more) {
    return '...';
}
add_filter('excerpt_more', '${slug}_excerpt_more');

/**
 * Add body classes
 */
function ${slug}_body_classes($classes) {
    if (is_home() || is_archive()) {
        $classes[] = 'blog-layout-' . get_theme_mod('blog_layout', '${spec.layout.homepage}');
    }
    
    return $classes;
}
add_filter('body_class', '${slug}_body_classes');

/**
 * Security enhancements
 */
// Remove WordPress version from head
remove_action('wp_head', 'wp_generator');

// Remove unnecessary meta tags
remove_action('wp_head', 'wlwmanifest_link');
remove_action('wp_head', 'rsd_link');

/**
 * Performance optimizations
 */
// Remove emoji scripts
remove_action('wp_head', 'print_emoji_detection_script', 7);
remove_action('wp_print_styles', 'print_emoji_styles');

// Disable XML-RPC
add_filter('xmlrpc_enabled', '__return_false');

/**
 * Theme activation hook
 */
function ${slug}_activation() {
    // Flush rewrite rules
    flush_rewrite_rules();
    
    // Set default options
    set_theme_mod('primary_color', '${spec.colors.primary}');
    set_theme_mod('accent_color', '${spec.colors.accent}');
}
add_action('after_switch_theme', '${slug}_activation');
`;
};

const generateThemeJSON = (spec) => {
  return {
    "$schema": "https://schemas.wp.org/trunk/theme.json",
    "version": 2,
    "settings": {
      "color": {
        "palette": [
          {
            "slug": "primary",
            "color": spec.colors.primary,
            "name": "Primary"
          },
          {
            "slug": "accent",
            "color": spec.colors.accent,
            "name": "Accent"
          },
          {
            "slug": "background",
            "color": spec.colors.background,
            "name": "Background"
          },
          {
            "slug": "text",
            "color": spec.colors.text,
            "name": "Text"
          }
        ]
      },
      "typography": {
        "fontFamilies": [
          {
            "slug": "heading",
            "fontFamily": spec?.fonts?.heading || "system-ui, sans-serif",
            "name": "Heading Font"
          },
          {
            "slug": "body",
            "fontFamily": spec?.fonts?.body || "system-ui, sans-serif",
            "name": "Body Font"
          }
        ]
      },
      "layout": {
        "contentSize": "1200px",
        "wideSize": "1400px"
      }
    },
    "styles": {
      "color": {
        "background": "var(--color-background)",
        "text": "var(--color-text)"
      },
      "typography": {
        "fontFamily": "var(--font-body)",
        "fontSize": "16px",
        "lineHeight": "1.6"
      },
      "elements": {
        "heading": {
          "typography": {
            "fontFamily": "var(--font-heading)",
            "fontWeight": "600"
          }
        },
        "button": {
          "color": {
            "background": "var(--color-accent)",
            "text": "white"
          },
          "typography": {
            "fontWeight": "500"
          }
        }
      }
    }
  };
};

export const buildWordPressThemeFromSpec = async (spec) => {
  validateWordPressSpec(spec);
  const slug = slugify(spec.projectName || 'theme');
  const outRoot = path.resolve('output');
  const themePath = path.join(outRoot, slug);

  await ensureDir(themePath);
  await ensureDir(path.join(themePath, 'assets', 'css'));
  await ensureDir(path.join(themePath, 'assets', 'js'));
  await ensureDir(path.join(themePath, 'assets', 'images'));
  await ensureDir(path.join(themePath, 'inc'));

  // Generate style.css
  const styleCSS = generateStyleCSS(spec);
  await fs.writeFile(path.join(themePath, 'style.css'), styleCSS, 'utf8');

  // Generate functions.php
  const functionsPHP = generateFunctionsPHP(spec);
  await fs.writeFile(path.join(themePath, 'functions.php'), functionsPHP, 'utf8');

  // Generate theme.json
  const themeJSON = generateThemeJSON(spec);
  await fs.writeFile(path.join(themePath, 'theme.json'), JSON.stringify(themeJSON, null, 2), 'utf8');

  // Generate template files
  await generateTemplateFiles(themePath, spec, slug);

  // Generate assets
  await generateAssets(themePath, spec);

  // Generate README
  await generateReadme(themePath, spec);

  return themePath;
};

const generateTemplateFiles = async (themePath, spec, slug) => {
  // index.php
  const indexPHP = `<?php
/**
 * The main template file
 *
 * @package ${slug}
 */

get_header(); ?>

<main id="primary" class="site-main">
    <div class="container">
        <?php if (have_posts()) : ?>
            <div class="content-area">
                <div class="posts-container">
                    <?php while (have_posts()) : the_post(); ?>
                        <article id="post-<?php the_ID(); ?>" <?php post_class('post'); ?>>
                            <?php if (has_post_thumbnail()) : ?>
                                <div class="post-thumbnail">
                                    <?php the_post_thumbnail('large'); ?>
                                </div>
                            <?php endif; ?>
                            
                            <header class="entry-header">
                                <?php
                                if (is_singular()) :
                                    the_title('<h1 class="entry-title">', '</h1>');
                                else :
                                    the_title('<h2 class="entry-title"><a href="' . esc_url(get_permalink()) . '" rel="bookmark">', '</a></h2>');
                                endif;
                                ?>
                            </header>

                            <div class="entry-content">
                                <?php
                                if (is_singular()) :
                                    the_content();
                                else :
                                    the_excerpt();
                                endif;
                                ?>
                            </div>

                            <?php if (!is_singular()) : ?>
                                <footer class="entry-footer">
                                    <a href="<?php the_permalink(); ?>" class="read-more">
                                        <?php _e('Read More', '${slug}'); ?>
                                    </a>
                                </footer>
                            <?php endif; ?>
                        </article>
                    <?php endwhile; ?>
                </div>
                
                <?php if (is_home() || is_archive()) : ?>
                    <div class="widget-area">
                        <?php get_sidebar(); ?>
                    </div>
                <?php endif; ?>
            </div>
            
            <?php
            the_posts_navigation(array(
                'prev_text' => __('Older posts', '${slug}'),
                'next_text' => __('Newer posts', '${slug}'),
            ));
            ?>
        <?php else : ?>
            <section class="no-results not-found">
                <header class="page-header">
                    <h1 class="page-title"><?php _e('Nothing here', '${slug}'); ?></h1>
                </header>
                <div class="page-content">
                    <p><?php _e('It seems we can&rsquo;t find what you&rsquo;re looking for.', '${slug}'); ?></p>
                </div>
            </section>
        <?php endif; ?>
    </div>
</main>

<?php
get_footer();
`;
  await fs.writeFile(path.join(themePath, 'index.php'), indexPHP, 'utf8');

  // header.php
  const headerPHP = `<!DOCTYPE html>
<html <?php language_attributes(); ?>>
<head>
    <meta charset="<?php bloginfo('charset'); ?>">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="profile" href="https://gmpg.org/xfn/11">
    <?php wp_head(); ?>
</head>

<body <?php body_class(); ?>>
<?php wp_body_open(); ?>

<div id="page" class="site">
    <a class="skip-link screen-reader-text" href="#primary"><?php _e('Skip to content', '${slug}'); ?></a>

    <header id="masthead" class="site-header">
        <div class="container">
            <div class="site-branding">
                <?php
                if (is_front_page() && is_home()) : ?>
                    <h1 class="site-title">
                        <a href="<?php echo esc_url(home_url('/')); ?>" rel="home">
                            <?php bloginfo('name'); ?>
                        </a>
                    </h1>
                <?php else : ?>
                    <p class="site-title">
                        <a href="<?php echo esc_url(home_url('/')); ?>" rel="home">
                            <?php bloginfo('name'); ?>
                        </a>
                    </p>
                <?php endif; ?>
                
                <?php
                $description = get_bloginfo('description', 'display');
                if ($description || is_customize_preview()) : ?>
                    <p class="site-description"><?php echo $description; ?></p>
                <?php endif; ?>
            </div>

            <nav id="site-navigation" class="main-navigation">
                <button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false">
                    <?php _e('Menu', '${slug}'); ?>
                </button>
                <?php
                wp_nav_menu(array(
                    'theme_location' => 'primary',
                    'menu_id' => 'primary-menu',
                    'menu_class' => 'nav-menu',
                ));
                ?>
            </nav>
        </div>
    </header>
`;
  await fs.writeFile(path.join(themePath, 'header.php'), headerPHP, 'utf8');

  // footer.php
  const footerPHP = `    <footer id="colophon" class="site-footer">
        <div class="container">
            <?php if (is_active_sidebar('footer-widgets')) : ?>
                <div class="footer-widgets">
                    <?php dynamic_sidebar('footer-widgets'); ?>
                </div>
            <?php endif; ?>
            
            <div class="site-info">
                <p>&copy; <?php echo date('Y'); ?> <?php bloginfo('name'); ?>. 
                <?php _e('Powered by', '${slug}'); ?> <a href="<?php echo esc_url(__('https://wordpress.org/', '${slug}')); ?>">WordPress</a>.</p>
            </div>
        </div>
    </footer>
</div>

<?php wp_footer(); ?>

</body>
</html>
`;
  await fs.writeFile(path.join(themePath, 'footer.php'), footerPHP, 'utf8');

  // sidebar.php
  const sidebarPHP = `<?php
/**
 * The sidebar containing the main widget area
 *
 * @package ${slug}
 */

if (!is_active_sidebar('sidebar-1')) {
    return;
}
?>

<aside id="secondary" class="widget-area">
    <?php dynamic_sidebar('sidebar-1'); ?>
</aside>
`;
  await fs.writeFile(path.join(themePath, 'sidebar.php'), sidebarPHP, 'utf8');

  // single.php
  const singlePHP = `<?php
/**
 * The template for displaying all single posts
 *
 * @package ${slug}
 */

get_header(); ?>

<main id="primary" class="site-main">
    <div class="container">
        <?php while (have_posts()) : the_post(); ?>
            <article id="post-<?php the_ID(); ?>" <?php post_class(); ?>>
                <header class="entry-header">
                    <?php the_title('<h1 class="entry-title">', '</h1>'); ?>
                    
                    <div class="entry-meta">
                        <?php
                        ${slug}_posted_on();
                        ${slug}_posted_by();
                        ?>
                    </div>
                </header>

                <?php if (has_post_thumbnail()) : ?>
                    <div class="post-thumbnail">
                        <?php the_post_thumbnail('large'); ?>
                    </div>
                <?php endif; ?>

                <div class="entry-content">
                    <?php
                    the_content();

                    wp_link_pages(array(
                        'before' => '<div class="page-links">' . __('Pages:', '${slug}'),
                        'after' => '</div>',
                    ));
                    ?>
                </div>

                <footer class="entry-footer">
                    <?php ${slug}_entry_footer(); ?>
                </footer>
            </article>

            <?php
            the_post_navigation(array(
                'prev_text' => __('Previous post', '${slug}'),
                'next_text' => __('Next post', '${slug}'),
            ));

            if (comments_open() || get_comments_number()) :
                comments_template();
            endif;
            ?>
        <?php endwhile; ?>
    </div>
</main>

<?php
get_sidebar();
get_footer();
`;
  await fs.writeFile(path.join(themePath, 'single.php'), singlePHP, 'utf8');

  // page.php
  const pagePHP = `<?php
/**
 * The template for displaying all pages
 *
 * @package ${slug}
 */

get_header(); ?>

<main id="primary" class="site-main">
    <div class="container">
        <?php while (have_posts()) : the_post(); ?>
            <article id="post-<?php the_ID(); ?>" <?php post_class(); ?>>
                <header class="entry-header">
                    <?php the_title('<h1 class="entry-title">', '</h1>'); ?>
                </header>

                <?php if (has_post_thumbnail()) : ?>
                    <div class="post-thumbnail">
                        <?php the_post_thumbnail('large'); ?>
                    </div>
                <?php endif; ?>

                <div class="entry-content">
                    <?php
                    the_content();

                    wp_link_pages(array(
                        'before' => '<div class="page-links">' . __('Pages:', '${slug}'),
                        'after' => '</div>',
                    ));
                    ?>
                </div>

                <?php if (get_edit_post_link()) : ?>
                    <footer class="entry-footer">
                        <?php
                        edit_post_link(
                            sprintf(
                                wp_kses(
                                    __('Edit <span class="screen-reader-text">%s</span>', '${slug}'),
                                    array(
                                        'span' => array(
                                            'class' => array(),
                                        ),
                                    )
                                ),
                                get_the_title()
                            ),
                            '<span class="edit-link">',
                            '</span>'
                        );
                        ?>
                    </footer>
                <?php endif; ?>
            </article>
        <?php endwhile; ?>
    </div>
</main>

<?php
get_footer();
`;
  await fs.writeFile(path.join(themePath, 'page.php'), pagePHP, 'utf8');

  // archive.php
  const archivePHP = `<?php
/**
 * The template for displaying archive pages
 *
 * @package ${slug}
 */

get_header(); ?>

<main id="primary" class="site-main">
    <div class="container">
        <?php if (have_posts()) : ?>
            <header class="page-header">
                <?php
                the_archive_title('<h1 class="page-title">', '</h1>');
                the_archive_description('<div class="archive-description">', '</div>');
                ?>
            </header>

            <div class="content-area">
                <div class="posts-container">
                    <?php while (have_posts()) : the_post(); ?>
                        <article id="post-<?php the_ID(); ?>" <?php post_class('post'); ?>>
                            <?php if (has_post_thumbnail()) : ?>
                                <div class="post-thumbnail">
                                    <a href="<?php the_permalink(); ?>">
                                        <?php the_post_thumbnail('medium'); ?>
                                    </a>
                                </div>
                            <?php endif; ?>
                            
                            <header class="entry-header">
                                <?php the_title('<h2 class="entry-title"><a href="' . esc_url(get_permalink()) . '" rel="bookmark">', '</a></h2>'); ?>
                                
                                <div class="entry-meta">
                                    <?php ${slug}_posted_on(); ?>
                                </div>
                            </header>

                            <div class="entry-summary">
                                <?php the_excerpt(); ?>
                            </div>

                            <footer class="entry-footer">
                                <a href="<?php the_permalink(); ?>" class="read-more">
                                    <?php _e('Read More', '${slug}'); ?>
                                </a>
                            </footer>
                        </article>
                    <?php endwhile; ?>
                </div>
                
                <div class="widget-area">
                    <?php get_sidebar(); ?>
                </div>
            </div>
            
            <?php
            the_posts_navigation(array(
                'prev_text' => __('Older posts', '${slug}'),
                'next_text' => __('Newer posts', '${slug}'),
            ));
            ?>
        <?php else : ?>
            <section class="no-results not-found">
                <header class="page-header">
                    <h1 class="page-title"><?php _e('Nothing here', '${slug}'); ?></h1>
                </header>
                <div class="page-content">
                    <p><?php _e('It seems we can&rsquo;t find what you&rsquo;re looking for.', '${slug}'); ?></p>
                </div>
            </section>
        <?php endif; ?>
    </div>
</main>

<?php
get_footer();
`;
  await fs.writeFile(path.join(themePath, 'archive.php'), archivePHP, 'utf8');

  // search.php
  const searchPHP = `<?php
/**
 * The template for displaying search results pages
 *
 * @package ${slug}
 */

get_header(); ?>

<main id="primary" class="site-main">
    <div class="container">
        <?php if (have_posts()) : ?>
            <header class="page-header">
                <h1 class="page-title">
                    <?php
                    printf(
                        esc_html__('Search Results for: %s', '${slug}'),
                        '<span>' . get_search_query() . '</span>'
                    );
                    ?>
                </h1>
            </header>

            <div class="content-area">
                <div class="posts-container">
                    <?php while (have_posts()) : the_post(); ?>
                        <article id="post-<?php the_ID(); ?>" <?php post_class('post'); ?>>
                            <header class="entry-header">
                                <?php the_title('<h2 class="entry-title"><a href="' . esc_url(get_permalink()) . '" rel="bookmark">', '</a></h2>'); ?>
                                
                                <div class="entry-meta">
                                    <?php ${slug}_posted_on(); ?>
                                </div>
                            </header>

                            <div class="entry-summary">
                                <?php the_excerpt(); ?>
                            </div>

                            <footer class="entry-footer">
                                <a href="<?php the_permalink(); ?>" class="read-more">
                                    <?php _e('Read More', '${slug}'); ?>
                                </a>
                            </footer>
                        </article>
                    <?php endwhile; ?>
                </div>
                
                <div class="widget-area">
                    <?php get_sidebar(); ?>
                </div>
            </div>
            
            <?php
            the_posts_navigation(array(
                'prev_text' => __('Older posts', '${slug}'),
                'next_text' => __('Newer posts', '${slug}'),
            ));
            ?>
        <?php else : ?>
            <section class="no-results not-found">
                <header class="page-header">
                    <h1 class="page-title"><?php _e('Nothing found', '${slug}'); ?></h1>
                </header>
                <div class="page-content">
                    <p><?php _e('Sorry, but nothing matched your search terms. Please try again with some different keywords.', '${slug}'); ?></p>
                    <?php get_search_form(); ?>
                </div>
            </section>
        <?php endif; ?>
    </div>
</main>

<?php
get_footer();
`;
  await fs.writeFile(path.join(themePath, 'search.php'), searchPHP, 'utf8');

  // 404.php
  const notFoundPHP = `<?php
/**
 * The template for displaying 404 pages (not found)
 *
 * @package ${slug}
 */

get_header(); ?>

<main id="primary" class="site-main">
    <div class="container">
        <section class="error-404 not-found">
            <header class="page-header">
                <h1 class="page-title"><?php _e('Oops! That page can&rsquo;t be found.', '${slug}'); ?></h1>
            </header>

            <div class="page-content">
                <p><?php _e('It looks like nothing was found at this location. Maybe try one of the links below or a search?', '${slug}'); ?></p>

                <?php get_search_form(); ?>

                <div class="widget widget_categories">
                    <h2 class="widget-title"><?php _e('Most Used Categories', '${slug}'); ?></h2>
                    <ul>
                        <?php
                        wp_list_categories(array(
                            'orderby' => 'count',
                            'order' => 'DESC',
                            'show_count' => 1,
                            'title_li' => '',
                            'number' => 10,
                        ));
                        ?>
                    </ul>
                </div>

                <div class="widget">
                    <h2 class="widget-title"><?php _e('Archives', '${slug}'); ?></h2>
                    <ul>
                        <?php
                        wp_get_archives(array(
                            'type' => 'monthly',
                            'limit' => 12,
                        ));
                        ?>
                    </ul>
                </div>
            </div>
        </section>
    </div>
</main>

<?php
get_footer();
`;
  await fs.writeFile(path.join(themePath, '404.php'), notFoundPHP, 'utf8');

  // searchform.php
  const searchFormPHP = `<?php
/**
 * Template for displaying search forms
 *
 * @package ${slug}
 */
?>

<form role="search" method="get" class="search-form" action="<?php echo esc_url(home_url('/')); ?>">
    <label>
        <span class="screen-reader-text"><?php echo _x('Search for:', 'label', '${slug}'); ?></span>
        <input type="search" class="search-field" placeholder="<?php echo esc_attr_x('Search &hellip;', 'placeholder', '${slug}'); ?>" value="<?php echo get_search_query(); ?>" name="s" />
    </label>
    <input type="submit" class="search-submit" value="<?php echo esc_attr_x('Search', 'submit button', '${slug}'); ?>" />
</form>
`;
  await fs.writeFile(path.join(themePath, 'searchform.php'), searchFormPHP, 'utf8');
};

const generateAssets = async (themePath, spec) => {
  // Custom CSS
  const customCSS = `/* Custom styles for ${spec.projectName} */

/* Additional customizations can be added here */

/* Dark mode toggle styles */
.dark-mode-toggle {
    background: none;
    border: 1px solid currentColor;
    color: inherit;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9rem;
}

.dark-mode-toggle:hover {
    background-color: var(--color-accent);
    color: white;
}

/* Custom block styles */
.wp-block-group.has-background {
    padding: 2rem;
    border-radius: 8px;
}

.wp-block-quote {
    border-left: 4px solid var(--color-accent);
    padding-left: 1rem;
    font-style: italic;
}

.wp-block-code {
    background: #f8f9fa;
    padding: 1rem;
    border-radius: 4px;
    font-family: monospace;
}

/* Responsive images */
img {
    max-width: 100%;
    height: auto;
}

/* Print styles */
@media print {
    .site-header,
    .site-footer,
    .widget-area {
        display: none;
    }
    
    .site-main {
        margin: 0;
        padding: 0;
    }
}
`;
  await fs.writeFile(path.join(themePath, 'assets', 'css', 'custom.css'), customCSS, 'utf8');

  // Editor styles
  const editorCSS = `/* Editor styles for ${spec.projectName} */

body {
    font-family: var(--font-body);
    color: var(--color-text);
    background-color: var(--color-background);
}

.editor-styles-wrapper h1,
.editor-styles-wrapper h2,
.editor-styles-wrapper h3,
.editor-styles-wrapper h4,
.editor-styles-wrapper h5,
.editor-styles-wrapper h6 {
    font-family: var(--font-heading);
    color: var(--color-text);
}

.editor-styles-wrapper .wp-block-button__link {
    background-color: var(--color-accent);
    color: white;
}
`;
  await fs.writeFile(path.join(themePath, 'assets', 'css', 'editor-style.css'), editorCSS, 'utf8');

  // Main JavaScript
  const mainJS = `/**
 * ${spec.projectName} JavaScript
 */

(function($) {
    'use strict';

    $(document).ready(function() {
        // Mobile menu toggle
        $('.menu-toggle').on('click', function() {
            $(this).toggleClass('active');
            $('.main-navigation').toggleClass('active');
        });

        // Smooth scrolling for anchor links
        $('a[href*="#"]:not([href="#"])').click(function() {
            if (location.pathname.replace(/^\\//, '') == this.pathname.replace(/^\\//, '') && location.hostname == this.hostname) {
                var target = $(this.hash);
                target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');
                if (target.length) {
                    $('html, body').animate({
                        scrollTop: target.offset().top - 100
                    }, 1000);
                    return false;
                }
            }
        });

        // Dark mode toggle
        if (typeof Storage !== 'undefined') {
            const darkModeToggle = $('.dark-mode-toggle');
            const body = $('body');
            
            // Check for saved dark mode preference
            const savedTheme = localStorage.getItem('darkMode');
            const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
            
            if (savedTheme === 'true' || (!savedTheme && prefersDark)) {
                body.addClass('dark-mode');
            }
            
            darkModeToggle.on('click', function() {
                body.toggleClass('dark-mode');
                const isDark = body.hasClass('dark-mode');
                localStorage.setItem('darkMode', isDark);
            });
        }

        // Lazy loading for images
        if ('IntersectionObserver' in window) {
            const imageObserver = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        img.src = img.dataset.src;
                        img.classList.remove('lazy');
                        imageObserver.unobserve(img);
                    }
                });
            });

            document.querySelectorAll('img[data-src]').forEach(img => {
                imageObserver.observe(img);
            });
        }
    });

    // AJAX functionality
    window.themeAjax = {
        loadMore: function(page) {
            $.ajax({
                url: themeAjax.ajaxurl,
                type: 'POST',
                data: {
                    action: 'load_more_posts',
                    page: page,
                    nonce: themeAjax.nonce
                },
                success: function(response) {
                    if (response.success) {
                        $('.posts-container').append(response.data.html);
                        if (!response.data.has_more) {
                            $('.load-more-btn').hide();
                        }
                    }
                }
            });
        }
    };

})(jQuery);
`;
  await fs.writeFile(path.join(themePath, 'assets', 'js', 'main.js'), mainJS, 'utf8');
};

const generateReadme = async (themePath, spec) => {
  const readmeContent = `# ${spec.projectName}

A modern WordPress theme generated by ThemeSmith.

## Features

- **Responsive Design**: Mobile-first approach with responsive layouts
- **Gutenberg Ready**: Full support for the WordPress Block Editor
- **Customizer Integration**: Live theme customization options
- **Accessibility**: WCAG 2.1 compliant for better accessibility
- **Performance**: Optimized for speed and performance
- **SEO Ready**: Clean, semantic HTML structure
- **Translation Ready**: Prepared for internationalization

## Installation

1. Upload the theme folder to \`/wp-content/themes/\` directory
2. Activate the theme through the 'Appearance' > 'Themes' menu in WordPress
3. Customize your theme through 'Appearance' > 'Customize'

## Theme Customization

### Colors
- Primary Color: ${spec.colors.primary}
- Accent Color: ${spec.colors.accent}
- Background: ${spec.colors.background}
- Text: ${spec.colors.text}

### Typography
- Heading Font: ${spec?.fonts?.heading || 'system-ui, sans-serif'}
- Body Font: ${spec?.fonts?.body || 'system-ui, sans-serif'}

### Layout Options
- Homepage Layout: ${spec.layout.homepage}
- Post Page Layout: ${spec.layout.postPage}
- Archive Layout: ${spec.layout.archivePage}

### Features
${spec.features?.map(feature => `- ${feature.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}`).join('\\n') || '- Standard WordPress features'}

## Customization

### Customizer Options
- Color scheme customization
- Logo upload
- Menu configuration
- Widget areas

### Widget Areas
- Sidebar
- Footer Widgets

### Menu Locations
- Primary Menu
- Footer Menu

## File Structure

\`\`\`
${slugify(spec.projectName)}/
├── style.css              # Main stylesheet
├── functions.php          # Theme functions
├── theme.json            # Gutenberg configuration
├── index.php             # Main template
├── header.php            # Header template
├── footer.php            # Footer template
├── sidebar.php           # Sidebar template
├── single.php            # Single post template
├── page.php              # Page template
├── archive.php           # Archive template
├── search.php            # Search template
├── 404.php               # 404 error template
├── searchform.php        # Search form template
├── assets/
│   ├── css/
│   │   ├── custom.css
│   │   └── editor-style.css
│   └── js/
│       └── main.js
└── screenshot.png        # Theme screenshot
\`\`\`

## Browser Support

- Chrome (latest)
- Firefox (latest)
- Safari (latest)
- Edge (latest)
- Internet Explorer 11+

## Requirements

- WordPress 6.0 or higher
- PHP 7.4 or higher

## License

This theme is licensed under the GPL v2 or later.

## Support

For support and documentation, visit the ThemeSmith website.

## Changelog

### Version 1.0.0
- Initial release
- Generated by ThemeSmith
- WordPress 6.0+ compatibility
- Gutenberg support
- Responsive design
- Accessibility features
`;
  await fs.writeFile(path.join(themePath, 'README.md'), readmeContent, 'utf8');
};

export default buildWordPressThemeFromSpec;
