import fs from 'fs/promises';
import path from 'path';
import { buildWordPressThemeFromSpec } from '../platforms/wordpress/builders/theme-builder.js';

const ensureDir = async (dir) => fs.mkdir(dir, { recursive: true });

const slugify = (str) => str
  .toLowerCase()
  .replace(/[^a-z0-9]+/g, '-')
  .replace(/(^-|-$)/g, '');

const validateSpec = (spec) => {
  const required = ['platform', 'projectName', 'layout', 'colors'];
  for (const key of required) {
    if (!spec[key]) throw new Error(`Missing required field: ${key}`);
  }
  
  // Support both Ghost and WordPress platforms
  if (!['ghost', 'wordpress'].includes(spec.platform)) {
    throw new Error(`Platform "${spec.platform}" is not supported. Supported platforms: ghost, wordpress`);
  }
  
  const layoutKeys = spec.platform === 'ghost' 
    ? ['homepage', 'postPage', 'tagPage']
    : ['homepage', 'postPage', 'archivePage'];
    
  for (const k of layoutKeys) {
    if (!spec.layout[k]) throw new Error(`Missing layout.${k}`);
  }
  
  const colorKeys = ['primary', 'accent', 'background', 'text'];
  for (const k of colorKeys) {
    if (!spec.colors[k]) throw new Error(`Missing colors.${k}`);
  }
};

export const buildThemeFromSpec = async (spec) => {
  validateSpec(spec);
  
  // Route to appropriate platform builder
  if (spec.platform === 'wordpress') {
    return await buildWordPressThemeFromSpec(spec);
  }
  
  // Default to Ghost theme builder (existing code)
  return await buildGhostThemeFromSpec(spec);
};

const buildGhostThemeFromSpec = async (spec) => {
  const slug = slugify(spec.projectName || 'theme');
  const outRoot = path.resolve('output');
  const themePath = path.join(outRoot, slug);

  await ensureDir(themePath);
  await ensureDir(path.join(themePath, 'assets', 'css'));
  await ensureDir(path.join(themePath, 'partials'));
  await ensureDir(path.join(themePath, 'assets', 'images'));
  await ensureDir(path.join(themePath, 'assets', 'js'));

  const themePkg = {
    name: slug,
    version: '0.1.0',
    engines: { ghost: '>=5.0.0' },
    author: { name: 'ThemeSmith', email: 'demo@themesmith.dev' },
    keywords: ['ghost-theme'],
    config: { posts_per_page: 5, card_assets: true }
  };

  const css = `/* Generated by ThemeSmith */
:root {
  --color-primary: ${spec.colors.primary};
  --color-accent: ${spec.colors.accent};
  --color-bg: ${spec.colors.background};
  --color-text: ${spec.colors.text};
  /* Ghost custom fonts support */
  --gh-font-heading: ${spec?.fonts?.heading || 'system-ui, sans-serif'};
  --gh-font-body: ${spec?.fonts?.body || 'system-ui, sans-serif'};
}
body { margin: 0; font-family: ${spec?.fonts?.body || 'system-ui, sans-serif'}; background: var(--color-bg); color: var(--color-text); }
a { color: var(--color-accent); text-decoration: none; }
header, footer { padding: 16px; }
.container { max-width: 960px; margin: 0 auto; padding: 16px; }
.grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 16px; }
/* Dark mode overrides */
.dark {
  --color-bg: #111111;
  --color-text: #eaeaea;
}
`;

  const defaultHbs = `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{{meta_title}}</title>
    {{ghost_head}}
    <link rel="stylesheet" href="assets/css/screen.css" />
  </head>
  <body>
    {{> "header"}}
    <main class="container">{{{body}}}</main>
    {{> "footer"}}
    <script src="assets/js/main.js"></script>
    {{ghost_foot}}
  </body>
  </html>`;

  const headerHbs = `<header>
  <div class="container">
    <h1>{{@site.title}}</h1>
    {{#if @site.navigation}}
    <nav>
      <ul>
        {{#foreach navigation}}
          <li><a href="{{url}}">{{label}}</a></li>
        {{/foreach}}
      </ul>
    </nav>
    {{/if}}
    ${Array.isArray(spec.features) && spec.features.includes('dark_mode') ? '<button id="dark-mode-toggle" style="float:right">Toggle Dark</button>' : ''}
  </div>
</header>`;

  const footerHbs = `<footer>
  <div class="container">
    <p>&copy; {{date format="YYYY"}} {{@site.title}}</p>
  </div>
</footer>`;

  const indexHbs = `{{!< default}}
<section>
  <h2>Latest Posts</h2>
  <div class="${spec.layout.homepage === 'grid' ? 'grid' : ''}">
    {{#foreach posts}}
      <article>
        <h3><a href="{{url}}">{{title}}</a></h3>
        {{excerpt}}
      </article>
    {{/foreach}}
  </div>
</section>`;

  const postHbs = `{{!< default}}
<article>
  <h1>{{title}}</h1>
  <section>{{content}}</section>
</article>`;

  const pageHbs = `{{!< default}}
{{#post}}
  <article {{post_class}}>
    {{#if @page.show_title_and_feature_image}}
      {{#if feature_image}}
        <figure>
          <img src="{{feature_image}}" alt="{{title}}" />
        </figure>
      {{/if}}
      <h1>{{title}}</h1>
    {{else}}
      <h1 class="sr-only">{{title}}</h1>
    {{/if}}
    {{#if custom_excerpt}}
      <p><em>{{custom_excerpt}}</em></p>
    {{/if}}
    <section>
      {{content}}
    </section>
  </article>
{{/post}}`;

  const tagHbs = `{{!< default}}
<section>
  <header>
    <h1>{{tag.name}}</h1>
    {{#if tag.description}}
      <p>{{tag.description}}</p>
    {{/if}}
  </header>
  <div class="${'grid'}">
    {{#foreach posts}}
      <article>
        <h3><a href="{{url}}">{{title}}</a></h3>
        {{excerpt}}
      </article>
    {{/foreach}}
  </div>
</section>`;

  const authorHbs = `{{!< default}}
<section>
  <header>
    {{#if posts}}
      {{#with posts.[0]}}
        <h1>{{primary_author.name}}</h1>
        {{#if primary_author.bio}}
          <p>{{primary_author.bio}}</p>
        {{/if}}
      {{/with}}
    {{else}}
      <h1>Author</h1>
    {{/if}}
  </header>
  <div class="${'grid'}">
    {{#foreach posts}}
      <article>
        <h3><a href="{{url}}">{{title}}</a></h3>
        {{excerpt}}
      </article>
    {{/foreach}}
  </div>
</section>`;

  const themeReadme = `# ${spec.projectName}

Generated by ThemeSmith

- Platform: ${spec.platform}
- Layout: homepage=${spec.layout.homepage}, post=${spec.layout.postPage}, tag=${spec.layout.tagPage}
- Colors: primary=${spec.colors.primary}, accent=${spec.colors.accent}, background=${spec.colors.background}, text=${spec.colors.text}
- Fonts: heading=${spec?.fonts?.heading || 'system'}, body=${spec?.fonts?.body || 'system'}
- Features: ${(spec.features || []).join(', ') || 'none'}

This theme was generated from a structured themeSpec.json. Assets use relative links.
`;

  await fs.writeFile(path.join(themePath, 'package.json'), `${JSON.stringify(themePkg, null, 2)}\n`, 'utf8');
  await fs.writeFile(path.join(themePath, 'default.hbs'), `${defaultHbs}\n`, 'utf8');
  await fs.writeFile(path.join(themePath, 'index.hbs'), `${indexHbs}\n`, 'utf8');
  await fs.writeFile(path.join(themePath, 'post.hbs'), `${postHbs}\n`, 'utf8');
  await fs.writeFile(path.join(themePath, 'page.hbs'), `${pageHbs}\n`, 'utf8');
  await fs.writeFile(path.join(themePath, 'tag.hbs'), `${tagHbs}\n`, 'utf8');
  await fs.writeFile(path.join(themePath, 'author.hbs'), `${authorHbs}\n`, 'utf8');
  await fs.writeFile(path.join(themePath, 'partials', 'header.hbs'), `${headerHbs}\n`, 'utf8');
  await fs.writeFile(path.join(themePath, 'partials', 'footer.hbs'), `${footerHbs}\n`, 'utf8');
  // Extend CSS with Ghost-required classes to satisfy validator
  const ghostRequiredCss = `
.kg-width-wide { max-width: 1200px; margin-left: auto; margin-right: auto; }
.kg-width-full { width: 100vw; margin-left: 50%; transform: translateX(-50%); }
`;
  await fs.writeFile(path.join(themePath, 'assets', 'css', 'screen.css'), `${css}\n${ghostRequiredCss}\n`, 'utf8');
  const mainJs = (() => {
    const lines = [
      "document.addEventListener('DOMContentLoaded',()=>{",
      "  console.log('ThemeSmith theme loaded');",
    ];
    if (Array.isArray(spec.features) && spec.features.includes('dark_mode')) {
      lines.push(
        "  const root=document.documentElement;",
        "  const key='ts_dark';",
        "  const btn=document.getElementById('dark-mode-toggle');",
        "  const apply=(on)=>{on?root.classList.add('dark'):root.classList.remove('dark');",
        "    if(btn) btn.textContent=on?'Light Mode':'Dark Mode';};",
        "  let pref=localStorage.getItem(key);",
        "  if(pref===null){pref=window.matchMedia&&window.matchMedia('(prefers-color-scheme: dark)').matches?'1':'0';}",
        "  const enabled=pref==='1';",
        "  apply(enabled);",
        "  if(btn){btn.addEventListener('click',()=>{const cur=document.documentElement.classList.contains('dark');",
        "    const next=!cur; apply(next); localStorage.setItem(key,next?'1':'0');});}",
      );
    }
    lines.push("});");
    return lines.join('\n') + '\n';
  })();

  await fs.writeFile(path.join(themePath, 'assets', 'js', 'main.js'), mainJs, 'utf8');
  await fs.writeFile(path.join(themePath, 'README.md'), `${themeReadme}\n`, 'utf8');

  return themePath;
};

export default buildThemeFromSpec;
