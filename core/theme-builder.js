import fs from 'fs/promises';
import path from 'path';

const ensureDir = async (dir) => fs.mkdir(dir, { recursive: true });

const slugify = (str) => str
  .toLowerCase()
  .replace(/[^a-z0-9]+/g, '-')
  .replace(/(^-|-$)/g, '');

const validateSpec = (spec) => {
  const required = ['platform', 'projectName', 'layout', 'colors'];
  for (const key of required) {
    if (!spec[key]) throw new Error(`Missing required field: ${key}`);
  }
  if (spec.platform !== 'ghost') {
    throw new Error('Only platform "ghost" is supported in this build');
  }
  const layoutKeys = ['homepage', 'postPage', 'tagPage'];
  for (const k of layoutKeys) {
    if (!spec.layout[k]) throw new Error(`Missing layout.${k}`);
  }
  const colorKeys = ['primary', 'accent', 'background', 'text'];
  for (const k of colorKeys) {
    if (!spec.colors[k]) throw new Error(`Missing colors.${k}`);
  }
};

export const buildThemeFromSpec = async (spec) => {
  validateSpec(spec);
  const slug = slugify(spec.projectName || 'theme');
  const outRoot = path.resolve('output');
  const themePath = path.join(outRoot, slug);

  await ensureDir(themePath);
  await ensureDir(path.join(themePath, 'assets', 'css'));
  await ensureDir(path.join(themePath, 'partials'));
  await ensureDir(path.join(themePath, 'assets', 'images'));

  const themePkg = {
    name: slug,
    version: '0.1.0',
    engines: { ghost: '>=5.0.0' },
    config: { posts_per_page: 5 }
  };

  const css = `/* Generated by ThemeSmith */
:root {
  --color-primary: ${spec.colors.primary};
  --color-accent: ${spec.colors.accent};
  --color-bg: ${spec.colors.background};
  --color-text: ${spec.colors.text};
}
body { margin: 0; font-family: ${spec?.fonts?.body || 'system-ui, sans-serif'}; background: var(--color-bg); color: var(--color-text); }
a { color: var(--color-accent); text-decoration: none; }
header, footer { padding: 16px; }
.container { max-width: 960px; margin: 0 auto; padding: 16px; }
.grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 16px; }
`;

  const defaultHbs = `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{{meta_title}}</title>
    <link rel="stylesheet" href="assets/css/screen.css" />
  </head>
  <body>
    {{> "header"}}
    <main class="container">{{{body}}}</main>
    {{> "footer"}}
  </body>
  </html>`;

  const headerHbs = `<header>
  <div class="container">
    <h1>{{@site.title}}</h1>
    {{#if @site.navigation}}
    <nav>
      <ul>
        {{#foreach navigation}}
          <li><a href="{{url}}">{{label}}</a></li>
        {{/foreach}}
      </ul>
    </nav>
    {{/if}}
  </div>
</header>`;

  const footerHbs = `<footer>
  <div class="container">
    <p>&copy; {{date format="YYYY"}} {{@site.title}}</p>
  </div>
</footer>`;

  const indexHbs = `{{!< default}}
<section>
  <h2>Latest Posts</h2>
  <div class="${spec.layout.homepage === 'grid' ? 'grid' : ''}">
    {{#foreach posts}}
      <article>
        <h3><a href="{{url}}">{{title}}</a></h3>
        {{excerpt}}
      </article>
    {{/foreach}}
  </div>
</section>`;

  const postHbs = `{{!< default}}
<article>
  <h1>{{title}}</h1>
  <section>{{content}}</section>
</article>`;

  const pageHbs = `{{!< default}}
<article>
  <h1>{{title}}</h1>
  <section>{{content}}</section>
</article>`;

  const tagHbs = `{{!< default}}
<section>
  <header>
    <h1>{{tag.name}}</h1>
    {{#if tag.description}}
      <p>{{tag.description}}</p>
    {{/if}}
  </header>
  <div class="${'grid'}">
    {{#foreach posts}}
      <article>
        <h3><a href="{{url}}">{{title}}</a></h3>
        {{excerpt}}
      </article>
    {{/foreach}}
  </div>
</section>`;

  const authorHbs = `{{!< default}}
<section>
  <header>
    <h1>{{author.name}}</h1>
    {{#if author.bio}}
      <p>{{author.bio}}</p>
    {{/if}}
  </header>
  <div class="${'grid'}">
    {{#foreach posts}}
      <article>
        <h3><a href="{{url}}">{{title}}</a></h3>
        {{excerpt}}
      </article>
    {{/foreach}}
  </div>
</section>`;

  const themeReadme = `# ${spec.projectName}

Generated by ThemeSmith

- Platform: ${spec.platform}
- Layout: homepage=${spec.layout.homepage}, post=${spec.layout.postPage}, tag=${spec.layout.tagPage}
- Colors: primary=${spec.colors.primary}, accent=${spec.colors.accent}, background=${spec.colors.background}, text=${spec.colors.text}
- Fonts: heading=${spec?.fonts?.heading || 'system'}, body=${spec?.fonts?.body || 'system'}
- Features: ${(spec.features || []).join(', ') || 'none'}

This theme was generated from a structured themeSpec.json. Assets use relative links.
`;

  await fs.writeFile(path.join(themePath, 'package.json'), `${JSON.stringify(themePkg, null, 2)}\n`, 'utf8');
  await fs.writeFile(path.join(themePath, 'default.hbs'), `${defaultHbs}\n`, 'utf8');
  await fs.writeFile(path.join(themePath, 'index.hbs'), `${indexHbs}\n`, 'utf8');
  await fs.writeFile(path.join(themePath, 'post.hbs'), `${postHbs}\n`, 'utf8');
  await fs.writeFile(path.join(themePath, 'page.hbs'), `${pageHbs}\n`, 'utf8');
  await fs.writeFile(path.join(themePath, 'tag.hbs'), `${tagHbs}\n`, 'utf8');
  await fs.writeFile(path.join(themePath, 'author.hbs'), `${authorHbs}\n`, 'utf8');
  await fs.writeFile(path.join(themePath, 'partials', 'header.hbs'), `${headerHbs}\n`, 'utf8');
  await fs.writeFile(path.join(themePath, 'partials', 'footer.hbs'), `${footerHbs}\n`, 'utf8');
  await fs.writeFile(path.join(themePath, 'assets', 'css', 'screen.css'), `${css}\n`, 'utf8');
  await fs.writeFile(path.join(themePath, 'README.md'), `${themeReadme}\n`, 'utf8');

  return themePath;
};

export default buildThemeFromSpec;
